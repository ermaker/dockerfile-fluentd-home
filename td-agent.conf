<source>
  @type forward
</source>

<match raw.**>
  @type record_reformer
  tag color
  <record>
    tag ${tag_suffix[1]}
  </record>
</match>

<match color>
  @type color_stripper
  tag decolorized
</match>

<match decolorized>
  @type rewrite_tag_filter
  rewriterule1 tag ^(.*)$ remove_tag.$1
</match>

<match remove_tag.**>
  @type record_reformer
  remove_keys tag
  tag ${tag_suffix[1]}
</match>


<match docker.**>
  @type record_reformer
  tag docker_parse_container_id
  <record>
    hostname ${tag_parts[1]}
  </record>
</match>

<match docker_parse_container_id>
  @type parser
  tag docker_set_tag
  format /^\/((?<project_name>.+?)_(?<container_name_short>.+?)_(?<container_number>\d+?)|(?<container_name_short>.+?))$/
  key_name container_name
  reserve_data yes
</match>

<match docker_set_tag>
  @type record_reformer
  tag ${container_name_short}
</match>


<match xing fetcher>
  @type record_reformer
  tag ruby.${tag}
</match>

<match mshard>
  @type record_reformer
  tag foreman.${tag}
</match>


<filter ruby.**>
  @type parser
  format /^((?<log_level_short>.), \[(?<time>.*?)\s+?#(?<pid>\d+)\]\s+?(?<log_level>\w+?) -- (?<log_tag>\S+?)?: )?(?<log>.*?)$/
  key_name log
  reserve_data yes
</filter>

<filter ruby.**>
  @type deparser
  format %s
  format_key_names log
  key_name message
  reserve_data yes
</filter>

<filter forego_.**>
  @type parser
  format /^(?<service_name>.+?)(\.(?<service_number>\d+?))?\s+?\| (?<log>.+?)$/
  key_name log
  reserve_data yes
</filter>

<filter foreman.**>
  @type parser
  format /^(?<logged_time>\d{2}:\d{2}:\d{2}) (?<service_name>.+?)\.(?<service_number>\d+?)\s+\| (?<log>.+?)$/
  key_name log
  reserve_data yes
</filter>

<match forego_.** foreman.**>
  @type rewrite_tag_filter
  rewriterule1 service_name ^(.+?)$ $1.${tag}
  rewriterule2 service_name .* unknown.${tag}
</match>

<filter dockergen.**>
  @type parser
  format /^(?<time>.+? .+?) (?<log>.+?)$/
  key_name log
  reserve_data yes
</filter>

<filter dockergen.**>
  @type deparser
  format %s
  format_key_names log
  key_name message
  reserve_data yes
</filter>

<match nginx.**>
  @type rewrite_tag_filter
  rewriterule1 log ^(?<remote>.+?) (?<host>.+?) (?<user>.+?) \[(?<time>.+?)\] "(?<method>.+?)(?: (?<path>.+?)(?: (?<version>.+?))?)?" (?<code>.+?) (?<size>.+?) "(?<referer>.+?)" "(?<agent>.+?)"$ access.${tag}
  rewriterule2 log ^(?<time>.+? .+?) \[(?<log_level>.+?)\] (?<pid>.+?)#(?<tid>.+?): (?<message>.+)$ error.${tag}
  rewriterule3 log .* unknown.${tag}
</match>

<filter access.nginx.**>
  @type parser
  format /^(?<remote>.+?) (?<host>.+?) (?<user>.+?) \[(?<time>.+?)\] "(?<method>.+?)(?: (?<path>.+?)(?: (?<version>.+?))?)?" (?<code>.+?) (?<size>.+?) "(?<referer>.+?)" "(?<agent>.+?)"$/
  time_format %d/%b/%Y:%H:%M:%S %z
  key_name log
  reserve_data yes
</filter>

<filter access.nginx.**>
  @type deparser
  format %s %s %s
  format_key_names method,path,code
  key_name message
  reserve_data yes
</filter>

<filter error.nginx.**>
  @type parser
  format /^(?<time>.+? .+?) \[(?<log_level>.+?)\] (?<pid>.+?)#(?<tid>.+?): (?<message>.+)$/
  key_name log
  reserve_data yes
</filter>

<filter kibana.**>
  @type parser
  format json
  key_name log
  reserve_data yes
</filter>

<filter fluentd.**>
  @type parser
  format /^((?<time>.+?) \[(?<log_level>\w+?)\]: )?(?<log>.*?)$/
  key_name log
  reserve_data yes
</filter>

<filter fluentd.**>
  @type deparser
  format %s
  format_key_names log
  key_name message
  reserve_data yes
</filter>

<filter swarm-agent.**>
  @type parser
  format /^time="(?<time>.+?)" level=(?<log_level>\w+?) msg="(?<log>.+?)" addr="(?<addr>.+?)" discovery="(?<discovery>.+?)" $/
  key_name log
  reserve_data yes
</filter>

<filter swarm-agent.**>
  @type deparser
  format %s
  format_key_names log
  key_name message
  reserve_data yes
</filter>

<match **>
  @type elasticsearch
  include_tag_key true
  hosts "#{ENV['ES_URI']}"
  logstash_format true
  logstash_prefix fluentd

  # buffer
  buffer_type file
  buffer_path /tmp
  buffer_chunk_limit 8m
  buffer_queue_limit 10000
  retry_limit 17
  flush_interval 5
</match>
